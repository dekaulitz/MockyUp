{
  "openapi": "3.0.2",
  "info": {
    "description": "Mockup server base on openAPI vers 3.xx",
    "version": "1",
    "title": "Mockup Server | MockyUp",
    "termsOfService": "",
    "contact": {
      "email": "sulaimanfahmi@gmail.com"
    }
  },
  "servers": [
    {
      "url": "{host}",
      "description": "mock api",
      "variables": {
        "host": {
          "description": "your`e host application",
          "default": "http://localhost:7070"
        }
      }
    },
    {
      "url": "{host}/mocks/mocking/{mockId}?path=",
      "description": "testing mock request",
      "variables": {
        "host": {
          "description": "your`e host application",
          "default": "http://localhost:7070"
        },
        "mockId": {
          "description": "your`e mockId",
          "default": "5e3aa62f11b5dc7e1bfaa1d6"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "User authentication"
    },
    {
      "name": "users",
      "description": "User data"
    },
    {
      "name": "mocks",
      "description": "Mocks data"
    },
    {
      "name": "mocking",
      "description": "Mocks data"
    }
  ],
  "paths": {
    "/mocks/login": {
      "post": {
        "summary": "for user login ",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/REQUEST_AUTH_LOGIN"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_AUTH_LOGIN"
                }
              }
            }
          },
          "401": {
            "description": "when user not found or invalid username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "422": {
            "description": "when the request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/auth/refresh": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "for user refreshing new token",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_AUTH_LOGIN"
                }
              }
            }
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "description": "when user has expired token or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/page": {
      "get": {
        "summary": "for paging the mocks",
        "tags": [
          "mocks"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          },
          {
            "$ref": "#/components/parameters/SIZE"
          },
          {
            "$ref": "#/components/parameters/PAGE"
          },
          {
            "$ref": "#/components/parameters/SORT"
          },
          {
            "$ref": "#/components/parameters/SEARCH"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PAGING_MOCKS_RESPONSE"
                }
              }
            },
            "description": "when request success"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/store": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "mocks"
        ],
        "summary": "for storing new mock",
        "parameters": [
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/REQUEST_STORE_NEW_MOCK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_MOCK"
                }
              }
            },
            "description": "when request success"
          },
          "422": {
            "description": "when the request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/{dataId}/detailWithAccess": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "mocks"
        ],
        "summary": "get detail mockId with access permissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_MOCK"
                }
              }
            }
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/users/list": {
      "get": {
        "summary": "get user list that search from username",
        "tags": [
          "mocks"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SEARCH_NAME_USER"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_MOCK_SEARCH_LIST_USERS"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/{dataId}/histories": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "get mock history of mock",
        "tags": [
          "mocks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_MOCK_HISTORY"
                }
              }
            },
            "description": "when request success"
          },
          "422": {
            "description": "when the request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/{dataId}/addUser": {
      "put": {
        "summary": "add user access to mock",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "tags": [
          "mocks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/REQUEST_ADD_ACCESS_USER_INTO_MOCK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when request succcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ADD_ACCESS_USER_INTO_MOCK"
                }
              }
            }
          }
        }
      }
    },
    "/mocks/{dataId}/remove/{userId}": {
      "delete": {
        "summary": "remove user access from mock",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/USER_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "tags": [
          "mocks"
        ],
        "responses": {
          "200": {
            "description": "when request succcess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ADD_ACCESS_USER_INTO_MOCK"
                }
              }
            }
          }
        }
      }
    },
    "/mocks/{dataId}/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "mocks"
        ],
        "summary": "get user list that has access into mock",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_MOCK_LIST_USERS"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/mocking/{dataId}": {
      "post": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "trace": {
        "tags": [
          "mocking"
        ],
        "summary": "this your`e mocking entry point",
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/PATH"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/mocks/{dataId}/spec": {
      "get": {
        "summary": "get detail spec",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "mocks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "this youre openApi spec base on mockId"
                }
              }
            }
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/{dataId}/histories/{historyId}": {
      "get": {
        "summary": "get detail spec",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "mocks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          },
          {
            "$ref": "#/components/parameters/HISTORY_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "this youre openApi spec base on mockId"
                }
              }
            }
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "for paging the users",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIZE"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          },
          {
            "$ref": "#/components/parameters/PAGE"
          },
          {
            "$ref": "#/components/parameters/SORT"
          },
          {
            "$ref": "#/components/parameters/SEARCH"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PAGING_USERS_RESPONSE"
                }
              }
            },
            "description": "when request success"
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/users/{dataId}/detail": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "for view user detail",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          },
          {
            "$ref": "#/components/parameters/DATA_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_USER_DETAIL"
                }
              }
            }
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/addUser": {
      "post": {
        "summary": "add user access",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/REQUEST_ADD_UPDATE_USER"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_USER_DETAIL"
                }
              }
            },
            "description": "when request success"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/users/{dataId}/update": {
      "put": {
        "summary": "update user information",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/REQUEST_ADD_UPDATE_USER"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_USER_DETAIL"
                }
              }
            },
            "description": "when request success"
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    },
    "/mocks/users/{dataId}/delete": {
      "delete": {
        "summary": "delete user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DATA_ID"
          },
          {
            "$ref": "#/components/parameters/CLIENT_ID"
          }
        ],
        "responses": {
          "200": {
            "description": "when request success"
          },
          "400": {
            "description": "when data not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when user has expired token or using invalid token"
          },
          "403": {
            "description": "when user has no access for viewing data ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESPONSE_ERROR"
                }
              }
            },
            "description": "when something bad happen in our backend"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RESPONSE_ERROR": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "extraMessages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requestId": {
            "type": "string",
            "description": "this is the unique id for the request"
          },
          "response_code": {
            "type": "string",
            "enum": [
              "MOCK010",
              "MOCK011",
              "MOCK012",
              "MOCK014",
              "MOCK015",
              "MOCK020",
              "MOCK021",
              "MOCK022",
              "MOCK023",
              "MOCK024",
              "MOCK025",
              "MOCK026",
              "MOCK027",
              "MOCK028",
              "MOCK001",
              "MOCK002"
            ]
          },
          "response_message": {
            "type": "string",
            "description": "this the information of failure"
          }
        }
      },
      "REQUEST_AUTH_LOGIN": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RESPONSE_AUTH_LOGIN": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "user id from database"
          },
          "token": {
            "type": "string",
            "description": "this is the token from backend for authorization access and put on header as Authorization = Bearer {token}"
          },
          "username": {
            "type": "string",
            "description": "username of user"
          },
          "accessMenus": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MOCKS_READ",
                "MOCKS_READ_WRITE",
                "USERS_READ",
                "USERS_READ_WRITE"
              ]
            },
            "description": "this the scope of the user"
          }
        }
      },
      "PAGING_MOCKS_RESPONSE": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "format": "int32",
            "description": "current page"
          },
          "pageCount": {
            "type": "number",
            "format": "int32",
            "description": "total page"
          },
          "rowCount": {
            "type": "number",
            "format": "int32",
            "description": "how much data that we got"
          },
          "rows": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "spec": {
                  "type": "object"
                },
                "swagger": {
                  "type": "object"
                },
                "title": {
                  "type": "string"
                },
                "updatedBy": {
                  "type": "string"
                },
                "updatedDate": {
                  "type": "number",
                  "format": "int64"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "userId": {},
                      "access": {
                        "type": "string",
                        "enum": [
                          "MOCKS_READ",
                          "MOCKS_READ_WRITE",
                          "USERS_READ",
                          "USERS_READ_WRITE"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "size": {
            "type": "number",
            "format": "int32",
            "description": "its how much data that we want to display"
          }
        }
      },
      "PAGING_USERS_RESPONSE": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "format": "int32",
            "description": "current page"
          },
          "pageCount": {
            "type": "number",
            "format": "int32",
            "description": "total page"
          },
          "rowCount": {
            "type": "number",
            "format": "int32",
            "description": "how much data that we got"
          },
          "rows": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accessList": {
                  "type": "object"
                },
                "id": {
                  "type": "string",
                  "description": "user id from database"
                },
                "updatedDate": {
                  "type": "number",
                  "format": "int64"
                },
                "username": {
                  "type": "string",
                  "description": "username of user"
                }
              }
            }
          },
          "size": {
            "type": "number",
            "format": "int32",
            "description": "its how much data that we want to display"
          }
        }
      },
      "REQUEST_STORE_NEW_MOCK": {
        "type": "object",
        "required": [
          "title",
          "description"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "youre mocktitle"
          },
          "description": {
            "type": "string",
            "description": "description for your`e mock"
          },
          "spec": {
            "type": "object",
            "description": "this you api contract please using openapi v3.x"
          }
        }
      },
      "RESPONSE_MOCK": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dateUpdated": {
            "type": "number",
            "format": "int64"
          },
          "spec": {
            "type": "object",
            "description": "this is your openapi contract"
          },
          "updatedBy": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string"
              },
              "username": {
                "type": "string"
              }
            }
          },
          "currentAccessUser": {
            "type": "object",
            "description": "current access of users",
            "properties": {
              "access": {
                "type": "string",
                "enum": [
                  "MOCKS_READ",
                  "MOCKS_READ_WRITE"
                ]
              },
              "username": {
                "type": "string"
              }
            }
          }
        }
      },
      "RESPONSE_MOCK_LIST_USERS": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "mock id"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RESPONSE_USER_DETAIL"
            }
          }
        }
      },
      "RESPONSE_MOCK_SEARCH_LIST_USERS": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RESPONSE_USER_DETAIL"
        }
      },
      "RESPONSE_MOCK_HISTORY": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "mockId": {
              "type": "string",
              "description": "mockId"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "users": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "access": {
                    "type": "string"
                  }
                }
              }
            },
            "swagger": {
              "type": "string",
              "description": "this your`e openApi in string raw"
            },
            "spec": {
              "type": "string",
              "description": "this is your`e openApi object class in string"
            },
            "updatedBy": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "userName": {
                  "type": "string"
                }
              }
            },
            "updatedDate": {
              "type": "number",
              "format": "int64"
            }
          }
        }
      },
      "RESPONSE_USER_DETAIL": {
        "type": "object",
        "properties": {
          "accessList": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MOCKS_READ",
                "MOCKS_READ_WRITE",
                "USERS_READ",
                "USERS_READ_WRITE"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "user id from database"
          },
          "username": {
            "type": "string",
            "description": "username of user"
          },
          "updatedDate": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "REQUEST_ADD_UPDATE_USER": {
        "type": "object",
        "properties": {
          "accessList": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MOCKS_READ",
                "MOCKS_READ_WRITE",
                "USERS_READ",
                "USERS_READ_WRITE"
              ]
            }
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "REQUEST_ADD_ACCESS_USER_INTO_MOCK": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "enum": [
              "MOCKS_READ",
              "MOCKS_READ_WRITE"
            ]
          },
          "userId": {
            "type": "string",
            "description": "user id from database"
          }
        }
      },
      "RESPONSE_ADD_ACCESS_USER_INTO_MOCK": {
        "type": "object",
        "properties": {
          "matchedCount": {
            "type": "number",
            "format": "int32"
          },
          "modifiedCount": {
            "type": "number",
            "format": "int32"
          },
          "upsertedId": {
            "type": "string"
          },
          "modifiedCountAvailable": {
            "type": "boolean"
          }
        }
      }
    },
    "parameters": {
      "SEARCH_NAME_USER": {
        "name": "username",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "DATA_ID": {
        "name": "dataId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "it can be your`e mockId, mockHistoryId, and userId"
      },
      "USER_ID": {
        "name": "userId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "it can be your`e userId as another param"
      },
      "PAGE": {
        "name": "page",
        "in": "query",
        "schema": {
          "type": "number",
          "format": "int32",
          "default": "1"
        }
      },
      "SIZE": {
        "name": "size",
        "in": "query",
        "schema": {
          "type": "number",
          "format": "int32",
          "default": "10"
        }
      },
      "SORT": {
        "name": "sort",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "for sorting attribute example to use it [field_data]:[desc/asc]",
        "example": "id:desc"
      },
      "SEARCH": {
        "name": "q",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "for searching data example [field_data]:[your`e_query]",
        "example": "username:root"
      },
      "CLIENT_ID": {
        "name": "client-id",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "your`e client ",
        "example": "mockup-frontend"
      },
      "PATH": {
        "name": "path",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "this your mocking endpoint"
      },
      "HISTORY_ID": {
        "name": "historyId",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "description": "this is your`e historyId",
        "required": true
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
